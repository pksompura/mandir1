  <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="donation-modal"
        className="flex justify-center items-center"
      >
        <div className="relative bg-white md:px-6 px-3 md:pt-5 pt-2 md:pb-6 pb-2 rounded-lg shadow-lg max-w-3xl w-full flex flex-col">
          {/* Close Button (Top Right) */}
          <button
            onClick={handleClose}
            className="absolute top-3 right-3 text-gray-600 hover:text-red-500 transition duration-200"
          >
            <IoClose className="text-2xl md:text-3xl" />
          </button>

          {/* Left Column - Your Information */}
          {/* <div className="md:w-1/2 md:p-4 p-2 border-b border-gray-300 md:border-b-0 md:border-r md:border-gray-200">
            {!donationuser?.full_name ? (
              <>
                <h2 className="text-xl text-center font-semibold md:mb-6 mb-3">
                  Your Information
                </h2>
                {/* Full Name */}
               {/*} <input
                  type="text"
                  className={`w-full md:p-2 p-1 border ${
                    infoErrors.full_name ? "border-red-500" : "border-gray-300"
                  } rounded-lg focus:outline-none`}
                  placeholder="Full Name"
                  value={userData.full_name}
                  onChange={(e) =>
                    setUserData1((prev) => ({
                      ...prev,
                      full_name: e.target.value,
                    }))
                  }
                />
                {infoErrors.full_name && (
                  <p className="text-red-500 text-xs">{infoErrors.full_name}</p>
                )} */}
                {/* Email */}
                <input
                //   type="email"
                //   className={`w-full md:p-2 p-1 border ${
                //     infoErrors.email ? "border-red-500" : "border-gray-300"
                //   } rounded-lg focus:outline-none`}
                //   placeholder="Email Address"
                //   value={userData.email}
                //   onChange={(e) =>
                //     setUserData1((prev) => ({ ...prev, email: e.target.value }))
                //   }
                // />
                // {infoErrors.email && (
                //   <p className="text-red-500 text-xs">{infoErrors.email}</p>
                // )}
                {/* Phone Number */}
                {/* <div className="flex gap-4 md:mb-4 mb-1">
                  <select className="md:w-1/3 w-1/2 md:p-2 p-1 text-xs border rounded-lg focus:outline-none focus:border-[#8d7f24] hover:border-[#8d7f24] transition">
                    <option value="+91">+91</option>
                    <option value="+1">+1</option>
                  </select>

                  <input
                    type="tel"
                    className="w-full md:p-2 p-1 border border-gray-300 rounded-lg focus:outline-none focus:border-[#8d7f24] hover:border-[#8d7f24] transition placeholder:text-xs"
                    placeholder="Phone Number"
                    value={userData.mobile_number}
                    onChange={(e) =>
                      setUserData1({
                        ...userData,
                        mobile_number: e.target.value,
                      })
                    }
                    required
                  />
                </div> */}
                {/* Citizenship Question */}
                {/* <div className="md:mt-4 mt-3">
                  <p className="md:mb-3 mb-1 mt-2 md:mt-1 md:text-sm text-xs">
                    Are you an Indian Citizen? <sup>*</sup>
                  </p>
                  <div className="flex space-x-6">
                    <label className="flex items-center space-x-2">
                      <input
                        type="radio"
                        name="is_indian_national"
                        value="yes"
                        checked={citizenStatus === "yes"}
                        onChange={() => {
                          setCitizenStatus("yes");
                          setShowError(false);
                          setForeignError(false);
                        }}
                      />
                      <span className="md:text-sm text-xs">Yes</span>
                    </label>
                    <label className="flex items-center space-x-2">
                      <input
                        type="radio"
                        name="is_indian_national"
                        value="no"
                        checked={citizenStatus === "no"}
                        onChange={() => {
                          setCitizenStatus("no");
                          setShowError(false);
                          setForeignError(true);
                        }}
                      />
                      <span className="md:text-sm text-xs">No</span>
                    </label>
                  </div>

                  {/* Reserve space for errors */}
                {/* <div className="h-4 mt-1"> 
                    {showError && (
                      <small className="text-red-500 text-xs">
                        Please select your citizenship
                      </small>
                    )}
                    {foreignError && citizenStatus === "no" && (
                      <small className="text-red-500 text-xs">
                        Foreign donations are not allowed for this campaign.
                      </small>
                    )}
                  </div>
                </div>*/}
                // <div>
                  {/* Checkbox with Agreement
                  <div className="flex items-start mt-4">
                    <input
                      type="checkbox"
                      id="agreeTerms"
                      className="mt-1 w-4 h-4 text-[#8d7f24] border-gray-300 rounded focus:ring-[#8d7f24]"
                      checked={isChecked}
                      onChange={() => setIsChecked(!isChecked)}
                    />
                    <label
                      htmlFor="agreeTerms"
                      className="text-[10px] text-gray-500 ml-2"
                    >
                      By proceeding, you are agreeing to Impact Giveaze
                      Foundation's{" "}
                      <a
                        href="/privacy-policy"
                        className="text-[#8d7f24] underline"
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        Privacy Policy
                      </a>{" "}
                      and{" "}
                      <a
                        href="/terms-and-conditions"
                        className="text-[#8d7f24] underline"
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        Terms & Conditions
                      </a>
                      , and receiving SMS/WhatsApp updates and notifications.
                    </label>
                  </div> */}
                  {/* Proceed Button (Disabled Until Checked) */}
                  {/* 
                  <button
                    disabled={!isChecked}
                    className={`w-full mt-3 p-2 rounded-lg ${
                      isChecked
                        ? "bg-[#8d7f24] text-white"
                        : "bg-gray-400 text-gray-700 cursor-not-allowed"
                    }`}
                  >
                    Proceed
                  </button> */}
                // </div>
              // </>
            // ) : (
              // <>
                {/* Show User's Information When Logged In */}
                {/* 
                <p className="mb-4 text-lg font-medium">
                  ðŸ‘¤ {donationuser?.full_name}
                </p>
                <p className="mb-4 text-lg font-medium">
                  ðŸ“§ {donationuser?.email}
                </p>
                <p className="mb-4 text-lg font-medium">
                  ðŸ“ž {donationuser?.mobile_number}
                </p> */}
              // </>
            // )}
          // </div>

          {/* Right Column - Donation Details */}
          // <div className="md:w-1/2 md:p-4 p-2 flex flex-col justify-between">
            // <h3 className="text-lg text-center font-semibold md:mb-3 mb-1">
            //   Select Donation Amount in INR{" "}
            // </h3>

            {/* Select Amount Header */}
            {/* <h4 className="text-base font-semibold md:mb-3 mb-2 text-left">
              Select Amount
            </h4> */}
{/* 
            <div className="grid grid-cols-3 gap-2 mb-4">
              {[500, 1500, 3000].map((amount) => (
                <button
                  key={amount}
                  className={`md:p-2 p-1 rounded-lg text-xs ${
                    donationAmount === amount
                      ? "bg-[#ffdd04] text-black"
                      : "border border-[#8d7f24] text-[#8d7f24]"
                  }`}
                  onClick={() => handlePresetClick(amount)}
                >
                  â‚¹ {amount}
                </button>
              ))}
            </div>
            <div>
              <input
                type="text"
                inputMode="numeric"
                pattern="[0-9]*"
                className={`w-full p-2 pl-6 mb-0.5 text-xs border rounded-lg transition focus:outline-none ${
                  error
                    ? "border-red-500 focus:border-red-500 hover:border-red-500"
                    : "border-gray-300 focus:border-[#8d7f24] hover:border-[#8d7f24]"
                }`}
                placeholder="Other amount - â‚¹5 & more"
                value={donationAmount ? `â‚¹ ${donationAmount}` : ""}
                onChange={handleInputChange}
              /> */}

              {/* Reserve space with fixed height */}
              {/* <div className="h-4 mb-2 md:mb-4">
                {error && <p className="text-red-500 text-[10px]">{error}</p>}
              </div>
            </div> */}

            {/* Progress Track */}
            {/* <div
              ref={trackRef}
              className="relative w-[95%] ml-3 h-1 md:h-2 mt-1 bg-gray-200 rounded-full select-none"
              onMouseDown={startDrag}
              onTouchStart={startDrag}
            >
              {/* Progress Fill */}
              <div
                className={`absolute top-0 left-0 md:h-2 h-1 bg-[#ff4757] rounded-full ${
                  isDragging ? "" : "transition-all duration-200"
                }`}
                style={{ width: `${percent}%` }}
              ></div> */}

              {/* Heart Button */}
              {/* <div
                className={`absolute top-1/2 -translate-y-1/2 cursor-pointer z-20 ${
                  isDragging ? "" : "transition-all duration-200"
                }`}
                style={{
                  left: `${percent}%`,
                  transform: "translate(-50%, -50%)",
                }}
                onMouseDown={startDrag}
                onTouchStart={startDrag}
              >
                <div className="md:w-7 md:h-7 w-6 h-6 bg-white border-2 border-[#ff4757] rounded-full flex items-center justify-center shadow">
                  {/* <img 
                    src="/images/heart-icon.svg"
                    alt="Heart"
                    className="md:w-4 md:h-4 w-3 h-3"
                    draggable={false}
                  /> */}
                {/* </div>
              </div>
            </div> */}

            {/* Support Us Section */}
            {/* <div className="md:mb-6 mb-2 md:mt-6 mt-4">
              <h3 className="text-base font-semibold text-center md:mb-2 mb-1">
                Support Us
              </h3>
              <select
                className="w-full p-2 border rounded-lg text-xs focus:outline-none focus:border-[#8d7f24] hover:border-[#8d7f24] transition"
                value={supportPercent}
                onChange={(e) => setSupportPercent(e.target.value)}
              >
                <option value={0}>0%</option>
                <option value={5}>5%</option>
                <option value={10}>10%</option>
                <option value={20}>20%</option>
              </select>
            </div>

            <h3 className="text-base font-semibold md:mb-4 mb-1 text-left">
              Total Donation: â‚¹ {calculateTotal()}
            </h3> */}
            {/* Citizenship Question */}
            {/* <div className="md:mt-4 mt-3">
              <p className="md:mb-3 mb-1 mt-2 md:mt-1 md:text-sm text-xs">
                Are you an Indian Citizen? <sup>*</sup>
              </p>
              <div className="flex space-x-6">
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="is_indian_national"
                    value="yes"
                    checked={citizenStatus === "yes"}
                    onChange={() => {
                      setCitizenStatus("yes");
                      setShowError(false);
                      setForeignError(false);
                    }}
                  />
                  <span className="md:text-sm text-xs">Yes</span>
                </label>
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="is_indian_national"
                    value="no"
                    checked={citizenStatus === "no"}
                    onChange={() => {
                      setCitizenStatus("no");
                      setShowError(false);
                      setForeignError(true);
                    }}
                  />
                  <span className="md:text-sm text-xs">No</span>
                </label>
              </div> */}

              {/* Reserve space for errors */}
              {/* <div className="h-4 mt-1">
                {showError && (
                  <small className="text-red-500 text-xs">
                    Please select your citizenship
                  </small>
                )}
                {foreignError && citizenStatus === "no" && (
                  <small className="text-red-500 text-xs">
                    Foreign donations are not allowed for this campaign.
                  </small>
                )}
              </div>
            </div> */}

            {/* Checkbox with Agreement */}
            {/* <div className="flex items-start mt-4">
              <input
                type="checkbox"
                id="agreeTerms"
                className="mt-1 w-4 h-4 text-[#8d7f24] border-gray-300 rounded focus:ring-[#8d7f24]"
                checked={isChecked}
                onChange={() => setIsChecked(!isChecked)}
              />
              <label
                htmlFor="agreeTerms"
                className="text-[10px] text-gray-500 ml-2"
              >
                By proceeding, you are agreeing to Impact Giveaze Foundation's{" "}
                <a
                  href="/privacy-policy"
                  className="text-[#8d7f24] underline"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Privacy Policy
                </a>{" "}
                and{" "}
                <a
                  href="/terms-and-conditions"
                  className="text-[#8d7f24] underline"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Terms & Conditions
                </a>
                , and receiving SMS/WhatsApp updates and notifications.
              </label>
            </div>
            <div className="flex justify-center">
              <button
                className="w-auto max-w-full px-20 py-3 gap-2 text-xl text-center mt-3 font-semibold text-white bg-[#d8573e] rounded-full
              shadow-md transition-all duration-300 hover:bg-[#a84430] hover:shadow-lg flex items-center justify-center whitespace-nowrap"
                onClick={handleDonateNow}
              >
                <span className="flex-1 text-left">Proceed to Pay</span>
                <span className="flex-1 text-right">â‚¹ {calculateTotal()}</span>
              </button>
            </div>
          </div>
        </div>
        
      </Modal> */}